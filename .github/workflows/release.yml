name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  clean-up:
    runs-on: ubuntu-latest
    steps:
      - name: Delete existing release
        run: gh release delete latest --repo ${{ github.repository }} --cleanup-tag --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: clean-up
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        
      - name: Create release
        run: |
          gh release create latest \
            --title "Latest Build" \
            --notes "Automated release" \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Generate version number
        id: version
        run: |
          # Use date format: YYYY.MM.DD.RUN_NUMBER-local
          DATE=$(date +'%Y.%m.%d')
          VERSION="${DATE}.${{ github.run_number }}-local"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build -c Release --no-restore

      - name: Pack NuGet package
        run: |
          dotnet pack src/OoplesFinance.YahooFinanceAPI.csproj \
            --configuration Release \
            --output ./release \
            -p:PackageVersion=${{ steps.version.outputs.VERSION }} \
            -p:Version=${{ steps.version.outputs.VERSION }}

      - name: Collect build outputs
        run: |
          mkdir -p release
          find src/bin/Release -type f \( -name "*.dll" -o -name "*.xml" -o -name "*.pdb" \) -exec cp {} release/ \;

      - name: Upload to GitHub Release
        run: |
          for file in release/*; do
            gh release upload latest "$file" --repo ${{ github.repository }} --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
